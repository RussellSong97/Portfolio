오버로딩(overloading)
 - 한 클래스 안에서 동일한 이름의 메소드를 여럿 정의할 수 있는 것
 	메소드 호출시 각 메소드별로 구분이 가능하면 동일한 이름으로 메소드들을 정리할 수도 있음
 - 메소드의 매개변수의 자료형이나 개수가 다르면 같은 이름으로 정의해도 됨
 	예) test(), test(0), text(10.2), test(1, 2)
	단, 리턴타입이 다른 걸로는 오버로딩이 안됨
 - 생성자도 오버로딩이 가능함 : 여러 가지 방법으로 인스턴스를 생성할 수 있게 됨

this 키워드
 - 현재 생성되고 있는 인스턴스를 의미 (생성자 안에서만 사용가능)
 - this.변수명 : 해당 변수는 멤버변수로 인식됨
 - this([매게변수(들)]) : 현재 실행되고 있는 생성자에서 오버로딩된 다른 생성자를 호출할 때 사용


문자열(java.lang.String)
 - java.lang 패키지는 자바에서 자동으로 import 해주는 패키지임
	자동으로 'import java.lang.*' 명령이 들어가 있음
 - 자바에서는 문자열도 개체 즉 인스턴스로 처리하며 그를 위해 String 클래스를 정의하고 있음
	객체이기 때문에 용량에 제한 없이 데이터를 저장할 수 있음
	String 클래스의 인스턴스로 사용하기 때문에 String 클래스의 멤버(변수, 상수, 메소드)들을 사용할 수 있음
 - 문법
	String str = new String("문자열") -> 정석적인 방법이나 사용하기 불편하여 거의 사용하지 않음
	String str = "문자열"; -> 변수처럼 생성할 수 있으며 문자열에만 제공되는 방법


 - 생성자
String(String original) : 지정한 문자열(original)을 String 인스턴스로 생성하나 보통 직접 문자열을 넣는 방식으로 작업
String(StringBuffer buffer) : 지정한 StringBuffer 객체를 문자열로 새롭게 생성하여 리턴
String(StringBuilder builder) : 지정한 StringBuilder 객체를 문자열로 새롭게 생성하여 리턴

 - 주요 메소드 : 원본 문자열을 변화시키는 메소드는 없음
리턴		메소드명 및 설명
char	charAt(int index) : 문자열에서 지정한 인덱스에 해당하는 문자를 추출하여 리턴
int		compareTo(String anotherString) : 문자열과 지정한 다른 문자열이 같은지를 리턴(대소문자 구분해서 같으면 0)
int		compareToIgnoreCase(String str) : 문자열과 지정한 다른 문자열이 같은지를 리턴(대소문자 구분없이 같으면 0)
String	concat(String str) : 문자열의 뒤에 지정한 문자열(str)을 붙여서 새로운 문자열로 리턴

boolean	endsWith(String suffix) : 문자열이 지정한 suffix로 끝나는 지 여부를 리턴
boolean	equals(Object anObject) : 문자열과 anObject가 동일한지 여부를 리턴(대소문자 구분)
boolean	equalsIgnoreCase(String anotherString) : equals()와 같은 동작을 하며 대소문자를 구분하지 않고 비교

indexOf() : 문자열에서 지정한 문자(열)의 위치(인덱스)를 찾아 리턴하는 메소드로 못 찾으면 -1을 리턴
int		indexOf(int ch) : 문자열에서 지정한 문자의 위치(인덱스)를 찾아 리턴
int		indexOf(int ch, int fromIndex) : 문자를 fromIndex 부터 찾기 시작하여 위치를 리턴
int		indexOf(String str) : 문자열에서 지정한 문자열의 위치(인덱스)를 찾아 리턴
int		indexOf(String str, int fromIndex) : 문자열을 fromIndex 부터 찾기 시작하여 위치를 리턴

lastIndexOf() : indexOf()와 비슷하나 찾는 위치를 문자열의 끝에서 부터 찾기 시작
int		lastIndexOf(int ch) : 문자열의 끝에서 부터 지정한 ch의 위치(인덱스)를 찾아 리턴
int		lastIndexOf(int ch, int fromIndex) : 문자를 fromIndex 부터 반대로 찾기 시작하여 위치를 리턴
int		lastIndexOf(String str) : 문자열의 끝에서 부터 지정한 str의 위치(인덱스)를 찾아 리턴
int		lastIndexOf(String str, int fromIndex) : 문자열를 fromIndex 부터 반대로 찾기 시작하여 위치를 리턴

boolean	isEmpty() : 문자열이 비어 있는지 여부를 리턴(빈 문자열 여부)
int		length() : 문자열의 길이로 글자 개수를 리턴, 문자열의 마지막 인덱스 + 1의 값과 같음

String	replace(char oldChar, char newChar) : 문자열에서 oldChar를 찾아 newChar로 변경한 새 문자열 리턴
String	replaceAll(String regex, String replacement) : 문자열에서 regex 찾아 replacement로 변경한 새 문자열 리턴

String[]	split(String regex) : 문자열을 regex를 구분자로 하여 자른 후 문자열 배열로 리턴
boolean	startsWith(String prefix) : 문자열의 시작 부분이 prefix인지 여부를 리턴
String	substring(int beginIndex) : 문자열의 beginIndex 부터 끝까지 잘라내어 새 문자열로 리턴
String	substring(int beginIndex, int endIndex) : 문자열의 beginIndex 부터 endIndex -1 까지 잘라내어 새 문자열로 리턴

String	toLowerCase() : 문자열에서 모든 영문 대문자를 소문자로 변환하여 새 문자열로 리턴
String	toUpperCase() : 문자열에서 모든 영문 소문자를 대문자로 변환하여 새 문자열로 리턴
String	trim() : 문자열의 양끝에 있는 공백을 제거한 후 새 문자열로 리턴(사용자가 입력하는 모든 데이터에서 사용)

static	String	valueOf(모든 종류의 데이터) : 지정한 데이터를 문자열로 형 변환하여 새로운 문자열로 리턴
 - static이므로 인스턴스 생성없이 String.vlaueOf(데이터)로 사용할 수 있음
 - 보통 문자열로 변환할 때에는 데이터 + ""으로 간편하게 사용하는 경우가 많음
	단, 메모리 관리에 민감한 프로그램 작업시에는 vlaueOf() 메소드를 사용하는 것이 좋다.


StringBuffer & StringBuilder
 - 문자열 변경을 위한 클래스들로 쓰레드 사용여부에 따라 선택하면 됨
 - 두 클래스는 메소드까지 동일하여 둘 중 아무 클래스나 사용해도 됨
	StringBuffer : jdk1.0에서 추가. 쓰레드 셰이프(thread safe)하여 쓰레드 사용시 사용됨
	StringBuilder : jdk1.5에서 추가. 쓰레드에서는 불안정하나 StringBuffer 보다 빠름

 - 생성자
StringBuffer(String str) : 지정한 문자열을 StringBuffer 인스턴스로 생성
StringBuilder(String str) : 지정한 문자열을 StringBuilder 인스턴스로 생성

 - 주요 메소드 : String 클래스와 겹치는 메소드는 생략
StringBuilder	append(모든 종류의 데이터) : 지정한 데이터를 StringBuilder의 뒤에 덧붙임
StringBuilder	delete(int start, int end) : start 부터 end - 1 까지 삭제한 후 새 StringBuilder로 리턴
StringBuilder	deleteCharAt(int index) : index에 해당하는 하나의 문자를 삭제한 후 새 StringBuilder로 리턴 
void			ensureCapacity(int minimumCapacity) : StringBuilder의 최소 용량을 minimumCapacity로 변경
StringBuilder	insert(int offset, 모든 종류의 데이터) : offset의 위치에 지정한 데이터를 끼워넣기
StringBuilder	reverse() : 문자열의 순서를 반대로 출력
void			setCharAt(int index, char ch) : index위치의 문자를 ch로 변경
String			toString() : String 인스턴스로 변경하여 리턴
void			trimToSize() : 여유 용량을 없애고 크기에 맞게 줄임
 - StringBuilder의 모든 메소드는 StringBuilder 클래스에도 동일한 이름과 매개변수로 존재함


배열(Array)
 - 같은 자료형의 데이터 여러 개를 한 번에 관리하기 위한 기억공간
 - 하나의 이름으로 여러 개의 데이터를 관리할 수 있음
 - 배열도 객체로 취급하며 인덱스 번호로 각 칸의 데이터에 접근할 수 있음
 - 배열에 들어가는 데이터는 기본 자료형 뿐만 아니라 일반 객체(인스턴스)도 저장됨
 - 크게 1차원 배열과 다차원(주로 2차원) 배열로 나뉨
 - 장점 : 같은 종류의 여러 데이터를 관리하기 쉽다. (인덱스 번호를 이용하면 루프를 돌릴 수 있음)
 - 단점 : 배열 생성시 반드시 배열의 크기(데이터가 저장되는 칸의 개수)를 알고 잇어야 함.

1차원 배열
 - 같은 종류의 데이터를 한 행이나 열로 나열하는 형식으로 가장 많이 사용되는 배열형식
 - 생성법
자료형[] 배열명 = new 자료형[배열의 크기];
예) int[] arrScore = new int[10];		// int 형 데이터 10개를 저장할 수 있는 arrScore라는 배열 생성
또는 자료형 배열명[] = new 자료형[배열의 크기];	// 방식도 가능하나 거의 첫번째 방식을 많이 사용함

 - 배열은 생성과 동시에 초기화시킬 수도 있음
 자료형[] 배열명 = {값1, 값2, ..., 값n};

다차원 배열
 - 보통 2차원배열만 사용하는 경우가 많음
 - 여러 개의 1차원 배열이 모인 것을 2차원 배열이라고 함
 - 생성법
자료형[][] 배열명 = new 자료형[배열의 행수][배열의 열수];
또는 
자료형 배열명[][] = new 자료형[배열의 행수][배열의 열수];
또는 
자료형[] 배열명[] = new 자료형[배열의 행수][배열의 열수];
 의 세가지 방법이 있으나 거의 첫번재 방법을 사용함

 - 배열은 생성과 동시에 초기화시킬 수도 있음
자료형[][] 배열명 = {
	{값1, 값2, ... , 값n},
	{값1, 값2, ... , 값n},
	{값1, 값2, ... , 값n},
}
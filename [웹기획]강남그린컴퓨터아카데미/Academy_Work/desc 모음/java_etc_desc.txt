예외(Exception)
 - 컴파일 오류가 아닌 프로그램 실행시 특정한 상황에서의 문제를 의미
 - 개발자가 미리 알고 처리를 해야 하는 기능
 - 자바에서는 예외적인 상황의 처리를 위해 try-catch문을 사용할 수 있음
- 문법
try{
	예외가 발생할 것 같은 실행문들;
 }catch(발생할 예외클래스){
	발생한 특정 예외에 대한 처리;
 }catch(발생할 예외클래스 2){
	다른 예외에 대한 처리;
 } finally {
예외 발생여부와 상관없이 반드시 동작되는 영역
중간에 return이 발생해도 먼저 실행된 후 return되는 영역
 }
 - 하나의 try에 여러 개의 catch문을 사용할 수 있음
 - 단, 여러 catch문을 사용할 경우  반드시 상위클래스에 해당하는 예외를 아래쪽에 배치해야 함
 	예) Exception클래스는 항상 가장 마지막
 - finally : try나 catch문 중간에 return으로 메소드를 종료시켜도 실행되는 영역
 	예외 발생여부와 상관없이 반드시 동작되어야 하는 실행문을 입력하는 곳
	예) DB Connection 닫기, ResultSet 닫기 등의 기능을 의미
 - 메소드들 중 선언부에 'throws 예외클래스'를 정의한 메소드들은 사용시 try-catch안에서 호출해야 함


Wrapper 클래스
 - 기본자료형 데이터를 객체(인스턴스)로 만들어 주는 클래스 ( - java.lang 패키지에 있음)
 - 종류 : java.lang.Boolean, byte, Character, Double, Float, Integer, Long, Short
 - 단순한 객체가 아닌 자료형을 유지한 채로 인스턴스화 시키는 클래스들
 - Boxing : 기본자료형 데이터를 객체화 하는 것
 - UnBoxing : 객체가 된 데이터를 다시 기본자료형 데이터로 돌려놓는 것

 - 생성자
 Integer(int val) : 지정한 int형 데이터를 Integer형 인스턴스로 생성
 Integer(String str) : 지정한 문자열을 Integer형 인스턴스로 생성
 	다른 모든 Wrapper클래스의 생성자들도 동일함
 
 - 주요 메소드
 static int parseInt(String s) : 지정한 문자열 s를 int형 기본 자료형 데이터로 리턴
  - 모든 Wrapper클래스에 parse자료형() 의 이름으로 존재함
 static Integer valueOf(String s) :  지정한 문자열 s를 Integer형 인스턴스로 리턴
  - 모든 Wrapper클래스에 동일한 이름으로 존재함


BigInteger 클래스
 - java.math 패키지에 있으며 long으로도 표현 못하는 큰 정수를 표현하는 클래스
 - 생성자
 BigInteger(String val) : 문자열로 표현하려는 숫자를 입력하여 BigInteger 인스턴스를 생성

 - 주요메소드
 리턴타입	/ 메소드명 및 설명
 BigInteger / abs()						: 절대값으로 리턴
 BigInteger / add(BigInteger val)		: BigInteger끼리의 덧셈
 BigInteger / divide(BigInteger val)	: BigInteger끼리의 나눗셈
 double		/ doubleValue()				: BigInteger를 double형 데이터로 변환
 float		/ floatValue()				: BigInteger를 float형 데이터로 변환
 int		/ intvalue()				: BigInteger를 int형 데이터로 변환
 long		/ longValue()				: BigInteger를 long형 데이터로 변환
 BigInteger / mod(BigInteger m)			: BigInteger끼리의 나머지 연산
 BigInteger / multiply(BigInteger val)	: BigInteger끼리의 곱셈
 BigInteger / pow(int exponent)			: BigInteger의 exponent거듭제곱
 BigInteger / subtract(BigInteger val)	: BigInteger끼리의 뺄셈


BigDecimal 클래스
 - java.math 패키지에 있으며 정확한 실수끼리의 연산을 위한 클래스
 - 정확한 실수끼리의 연산을 위한 클래스
 - double형 실수를 계산할 때 소수점 아래로 정리되지않는 숫자들이 나오는 경우가 있다.
 이런 경우를 대비해서 BigDecimal이라는 클래스를 이용한다.

 - 주요메소드
 리턴타입	/ 메소드명 및 설명
 BigDecimal / abs()						: 절대값으로 리턴
 BigDecimal / add(BigDecimal val)		: BigDecimal끼리의 덧셈
 BigDecimal / divide(BigDecimal val)	: BigDecimal끼리의 나눗셈
 double		/ doubleValue()				: BigDecimal를 double형 데이터로 변환
 float		/ floatValue()				: BigDecimal를 float형 데이터로 변환
 int		/ intvalue()				: BigDecimal를 int형 데이터로 변환
 long		/ longValue()				: BigDecimal를 long형 데이터로 변환
 BigDecimal / mod(BigDecimal m)			: BigDecimal끼리의 나머지 연산
 BigDecimal / multiply(BigDecimal val)	: BigDecimal끼리의 곱셈
 BigDecimal / pow(int exponent)			: BigDecimal의 exponent거듭제곱
 BigDecimal / subtract(BigDecimal val)	: BigDecimal 뺄셈



Math클래스
 - java.lang 패키지에 있는 클래스로 수학관련 기능을 제공하는 클래스
 - 생성자가 따로 없으며 모든 필드와 메소드들이 static으로 지정되어있어 인스턴스를 생성할 필요가 없음



StringTokenizer 클래스
 - java.lang 패키지에 있는 클래스로 문자열을 여러 조각을 자를 때 사용하는 클래스
 - 기능성 String클래스의 split() 메소드와 비슷하나 리턴타입이 String[] 이 아닌 StringTokenizer의 인스턴스형
 - 구분자를 여러 종류로 사용할 수 있으나 한 글자로만 구분자를 만들어야 함
 - 생성자
 StringTokenizer(String str) : 문자열을 띄어쓰기를 기준으로 나눔
 StringTokenizer(String str, String delim) : 문자열을 delim을 기준으로 나눔
 StringTokenizer(String str, String delim, boolean returnDelims) : 문자열을 delim을 기준으로 나누며  returnDelims가 true면 delim도 포함하고 false이면 미포함(기본값 : false)

 - 주요메소드
 리턴	 / 메소드명 및 설명
 int	 / countTokens()		: 문자열 조각(token)의 개수
 boolean / hasMoreElements()	: 다음 토큰이 있는지 여부(루프의 조건으로 사용)
 boolean / hasMoreTokens()		: hasMoreElements()와 동일
 Object	 / nextElement()		: 다음 요소(토큰)을 리턴
 String  / nextToken()			: nextElement()와 동일




Random 클래스
 - java.util 패키지에 있는 클래스로 0이상 1미만의 난수를 발생시키는 클래스
 - 실수로 값이 나오기 때문에 될 수 있으면 정수로 바꾸어 작업해야 함
 - 주로 복권 등의 예측불가 기능에서 많이 사용됨



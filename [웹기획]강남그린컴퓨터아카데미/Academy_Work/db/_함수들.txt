각종 연산자들과 함수들

연산자
산술 연산자 : + - * / %
 - 사칙연산 및 나머지 연산자가 존재하며 주로 컬럼단위로 계산됨
  - '+'가 문자열 연결에 사용되지 않음(concat() 함수 사용)

비교 연산자 : > >= < <= = != <> like is
	- 결과가 논리값으로 주로 where절에서 조건으로 사용됨
	- > >= < <=   : 이상, 이하, 미만, 초과의 연산자로 숫자와 날짜를 피연산자로 사용함
	- = != <>      : 같다(=)와 같지 않다(!= <>) 로 숫자 외에도 문자열이나 날짜에도 사용됨
	- like         : 데이터가 같은지가 아닌 포함되어 있는지를 검사하는 연산자로 검색에서 주로 사용됨
		like는 반드시 와일드카드(%)와 함께 사용해야 함
		와일드 카드로는 모든 문자열을 대신하는 '%'와 한 글자를 대신하는 '_'가 있음
		와일드 카드를 사용하지 않고 like를 쓰면 '='과 동일하게 동작함
		예1) a like '%z%' → a 필드에 'z'라는 글자로 시작하는 데이터가 있는지 여부
		예2) a like 'z%' → a 필드에 'z' 라는 글자로 시작하는 데이터가 있는지 여부
		예3) a like '%z' → a 필드에 'z' 라는 글자로 끝나는 데이터가 있는지 여부
	- is : 객체의 비교연산자로 거의 null값을 비교할 때 사용됨
		예) 컬럼명 is null → 지정한 컬럼의 데이터가 null인지 여부
		예) 컬럼명 is not null → 지정한 컬럼의 데이터가 null이 아닌지 여부
.
논리 연산자 : and or not
	- 조건들을 연산하여 하나의 논리값으로 리턴하는 연산자
	- and : 논리곱 연산자로 모든 조건이 참이어야 결과가 참이 되는 연산자
		조건들중 하나라도 거짓이면 모든 조건이 거짓이 되는 연산자
	- or : 논리합 연산자로 모든 조건이 거짓이어야 결과가 거짓이 되는 연산자
		조건들중 하나라도 참이면 모든 조건이 참이 되는 연산자
	- not : 부정 연산자로 조건을 뒤집어 참은 거짓으로 거짓은 참으로 연산하는 연산자
		단항 연산자로 우선 순위가 가장 높음
	- 우선순위 : not → and → or
	- 결과값은 논리값이나 0과 1로 표현함
.
범위 연산자 : between
	- 범위를 조건으로 검색하는 연산자
	- 문법 : 컬럼명 between 시작값 and 종료값 → 지정한 컬럼의 시작값 부터 종료값 까지에 속하는지 여부
		시작값 이상 종료값 이하로 검색함(미만이나 초과는 안됨)
	- 예 : 10만원 대 가격을 검색
		price between 100000 and 199999 또는 price >= 100000 and price < 200000
.
in 연산자
	- 주어진 보기에 속하는 지 검색하는 연산자
	- 문법 : 컬럼명 in (보기1, 보기2, ..., 보기n) → 지정된 컬럼의 데이터가 보기중에 있는지 검색
	- 예 : country in ('korea', 'japan', 'china', 'america', 'russia') → 국적이 보기의 나라들 중 하나이면
	- in 연산자에 부정 연산자인 not을 붙이면 들어 있지 않은 데이터를 검색
		컬럼명 not in (보기1, 보기2, ..., 보기n) → 지정된 컬럼의 데이터가 보기중에 없는지 검색
		예 : country not in ('korea', 'japan', 'china', 'america', 'russia') → 국적이 보기의 나라들 중 없으면
.

함수들
1. 집계함수
	- 주로 group by 절과 연계되어 select절에서 사용되는 함수들로 데이터들을 묶어서 하나의 값으로 만들 때 사용

	1) sum() 함수
	- 합을 구하는 함수로 매개변수로 컬럼명을 넣으면 해당 컬럼  값들의 합을 구함
	- 예) sum(price) → price라는 컬럼의 총합

	2) avg() 함수
	- 평균을 구하는 함수로 매개변수로 컬럼명을 넣으면 해당 컬럼  값들의 평균을 구함
	- 예) avg(price) → price라는 컬럼의 평균

	3) count() 함수
	- 개수를 구하는 함수로 매개변수로 컬럼명을 넣으면 해당 컬럼 값들의 개수를 구함
	- 집계함수들 중에서 유일하게 매개변수로 숫자가 아닌 값이 들어있는 컬럼ㅁ을 사용할 수 있음
	- 개수를 구할 데이터가 없으면 0을 리턴(다른 함수들은 데이터가 없으면 null을 리턴)
	- 개수를 구할 컬럼에 null이 들어있으면 개수에서 빠지게 됨
		레코드의 개수를 알기 위해서는 매개변수로 primary key나 절대 비어있지 않은 컬럼 또는 전체 컬럼을 의미하는 '*'를 사용해야 함
	- 예) count(price) → price라는 컬럼의 레코드 개수(null은 제외)

	4) max() 함수
	- 최대값을 구하는 함수로 매개변수로 컬럼명을 넣으면 해당 컬럼 값들의 최대값을 구함
	- 예) max(price) → price라는 컬럼의 최대값

	5) min() 함수
	- 최소값을 구하는 함수로 매개변수로 컬럼명을 넣으면 해당 컬럼 값들의 최소값을 구함
	- 예) min(price) → price라는 컬럼의 최소값

	6) stdev() 함수 : 표준편차를 구하는 함수

	7) var_samp() 함수 : 분산를 구하는 함수
.

2. 흐름 제어 함수
	- 일반 프로그래밍에서의 분기문과 반복문을 함수로 만들어 놓은 것
	- 실제 분기문과 반복문은 따로 존재하며 여기에서는 select문 등에서 사용할 수 있는 함수의 의미

	1) if() 함수
	- 문법 : if(조건식, 참일 때 할일, 거짓일 때 할일)
	- 조건식을 판단하여 참 또는 거짓일 경우 해야할  일을 각각 따로 지정해 놓음
	- select절과 where절에서 사용가능

	2) ifnull() 함수
	- 문법 : ifnull(수식1, 수식2)
	- 수식1이 null이면 수식2가, null이 아니ㅣ면 수식1이 실행됨
	- 대부분 수식1에 컬럼을 넣어 컬럼이 null이면 수식2가 처리하게 함

	3) nullif() 함수
	- 문법 : nullif(수식1, 수식2)
	- 수식1과 수식2가 같으면 null을 리턴하고, 다르면 수식1을 리턴함

	4) case-when-else-end 연산자
	- 문법
		case 수식 when 비교값1 then 처리1 when 비교값2 then 처리2 ... else 기본처리 end;
.

3. 문자열 함수
1) ascii() 함수
- 문법 : ascii(문자) → 지정한 문자의 아스키코드 값을 리턴
- 아스키코드값을 구할 문자는 영문자만 가능

2) char() 함수
- 문법 : char(아스키코드값) → 지정한 아스키코드에 해당하는 문자 리턴

3) char_length() 함수
- 문법 : char_length(문자열) → 지정한 문자열의 글자 개수를 리턴
- 예) select char_length('abcd가나다라');		-- 8
- 한글과 영문의 차이 없이 한 글자로 계산

4) length() 함수
- 문법 : length(문자열) → 지정한 문자열의 바이트수를 리턴
- 예) select length('abcd가나다라');		-- 16
- 한글은 3, 영문은 1로 계산됨

5) concat() 함수
- 문법 : concaat(문자열1, 문자열2, ..., 문자열n);	-- 각 문자열을 결합하여 하나의 문자열로 리턴
- 예) select concat('abc', 'def');		-- abcdef

6) concat_ws() 함수
- 문법 : concaat_ws(구분자, 문자열1, 문자열2, ..., 문자열n);	
	-- 각 문자열을 결합할때 구분자를 사이에 넣어 하나의 문자열로 리턴
- 예) select concat_ws('/', '2021', '04', '06');		-- 2021/04/06

7) elt() 함수
- 문법 : elt(위치번호, 문자열1, 문자열2, ..., 문자열n);	-- 위치 번호에 해당하는 문자열 리턴
- 예) select elt(2, 'aa', 'bb', 'cc', 'dd');	-- bb
- 위치번호에 해당하는 문자열이 없을 경우 null을 리턴
- 위치번호는 1번 부터 시작됨

8) field() 함수
- 문법 : field(찾을 문자열, 문자열1, 문자열2, ..., 문자열n);	-- 문자열들 중에 '찾을 문자열이 있는 위치번호 리턴
- 예) select field('cc', 'aa', 'bb', 'cc', 'dd');	-- 3
- 찾는 문자열이 없으면 0을 리턴

9) find_in_set() 함수
- 문법 : find_in_set(찾을 문자열, 문자열셋)		-- 문자열셋에서 '찾을 문자열'이 있는 위치번호를 리턴
- 문자열셋 : 문자열들을 쉼표로 구분하며, 공백은 없어야 함(공백이 있으면 공백도 데이터에 포함하여 찾음)
- 예) select find_in_set('ff', 'aa,cc,ff,zz');		-- 3
- 찾는 문자열이 없으면 0을 리턴

10) instr() 함수
- 문법 : instr(문자열, 찾는 문자열)		-- 문자열에서 지정한 '찾는 문자열'의 위치번호를 리턴
- 예) select instr('abcdefg', 'def');	-- 4
- 찾는 문자열이 없으면 0을 리턴

11) locate() 함수
- 문법 : locate(찾는 문자열, 문자열)	-- 문자열에서 지정한 '찾는 문자열'의 위치번호를 리턴
- 예) select locate('def', 'abcdefg');	-- 4
- 찾는 문자열이 없으면 0을 리턴
- instr() 함수와 동일하며 매개변수의 순서만 다름

12) format() 함수
- 문법 : format(실수, 자릿수)		-- 실수에서 소수점 아래 자리를 지정한 자릿수에 맞춰 반올림 후 리턴
- 예) select format(3.141592, 3);	-- 3.142
- 지정한 자릿수가 넘칠 경우 0으로 채워 리턴
- 예) select format(3.141592, 10);	-- 3.1415920000

13) bin(), hex(), oct() 함수
- 문법 : bin(10진수), hex(10진수), oct(10진수)	-- 지정된 10진수를 각각 2진수, 16진수, 8진수로 변환하여 리턴
- 예) select bin(31), hex(31), oct(31);		-- 11111	1F	37

14) insert() 함수
- 문법 : insert(문자열, 위치, 길이, 삽입할 문자열)	-- 문자열의 '위치'에 길이 만큼 삭제 후 삽입할 문자열
- 예) select insert('abcdefghij', 3, 4, '@@');		-- ab@@ghij

15) left() 함수
- 문법 : left(문자열, 자를 길이)	-- 문자열의 왼쪽부터 '자를 길이'만큼 잘라내어 리턴
- 예) select left('abcdefghij', 4);		-- abcd
- 자를 길이가 0일 경우 ''(빈문자열)을 리턴

16) right() 함수
- 문법 : right(문자열, 자를 길이)	-- 문자열의 오른쪽부터 '자를 길이'만큼 잘라내어 리턴
- 예) select right('abcdefghij', 4);		-- 'ghij'
- 자를 길이가 0일 경우 ''(빈문자열)을 리턴
- 자를 길이가 문자열의 문자 개수보다 크면 그냥 문자열을 리턴

17) mid() 함수
- 문법 : mid(문자열, 자를 위치, 자를 길이)	-- '자를 위치' 부터 '자를 길이'만큼 잘라내어 리턴
- 예) select mid('abcdefghij', 4, 3);		-- 'def'

18) lcase() 함수
- 문법 : lcase(문자열)	-- 문자열에 있는 모든 영문을 소문자로 변환하여 리턴
- 예) select lcase('abCD가나');		-- abcd가나

19) ucase() 함수
- 문법 : ucase(문자열)	-- 문자열에 있는 모든 영문을 대문자로 변환하여 리턴
- 예) select ucase('abCD가나');		-- ABCD가나

20) lpad() 함수
- 문법 : lpad(문자열, 길이, 채울 문자열)	-- '문자열'을 '길이' 만큼 늘린 후 왼쪽으로 '채울 문자열'을 채운 후 리턴
- 예) select lpad('abcd', 7, '#');		-- ###abcd
- '길이'가 '문자열'의 길이보다 짧으면 '문자열'을 '길이'만큼 잘라내어 리턴
- 예) select lpad('abcd', 3, '#');		-- abc

21) rpad() 함수
- 문법 : rpad(문자열, 길이, 채울 문자열)	-- '문자열'을 '길이' 만큼 늘린 후 오른쪽으로 '채울 문자열'을 채운 후 리턴
- 예) select rpad('abcd', 7, '#');		-- abcd###
- '길이'가 '문자열'의 길이보다 짧으면 '문자열'을 '길이'만큼 잘라내어 리턴
- 예) select rpad('abcd', 3, '#');		-- abc

22) ltrim() 함수
- 문법 : ltrim(문자열)	-- 문자열의 왼쪽 공백을 제거하여 리턴
- 예) select ltrim('   ab  cd   ');		-- 'ab  cd   '

23) rtrim() 함수
- 문법 : rtrim(문자열)	-- 문자열의 오른쪽 공백을 제거하여 리턴
- 예) select rtrim('   ab  cd   ');		-- '   ab  cd'

24) trim() 함수
- 문법 : trim(문자열)	-- 문자열의 양쪽 공백을 제거하여 리턴
- 예) select trim('   ab  cd   ');		-- 'ab  cd'

25) repeat() 함수
- 문법 : repeat(문자열, 횟수)		-- 문자열을 지정한 횟수만큼 반복
- 예) select repeat('abc', 3);	-- abcabcabc

26) replace() 함수
 - 문법 : replace(문자열, 찾을 문자열, 바꿀 문자열)	-- 문자열에서 '찾을 문자열'을 '바꿀 문자열'로 변경
 - 예) select replace('abcedf', 'cd', 'zz');	-- abzzef
 - 찾는 문자열이 없으면 원본 문자열 리턴
 - 찾는 문자열이 여러 번 있으면 모두 변경시킴

27) reverse() 함수
 - 문법 : reverse(문자열)					-- 문자열의 순서를 뒤집어 리턴
 - 예) select revsere('abcd')			-- dcba

28) space() 함수
 - 문법 : space(횟수)		-- 지정된 횟수만큼 공백을 리턴
 - 예) select concat('::', space(5), '::');		-- ::     ::

29) substring() 함수
 - 문법 : substring(문자열, 시작위치, 자를 개수)		-- 문자열에서 시작위치 부터 자를 개수만큼 잘라내어 리턴
 - 예) select substring('abcdefg', 2, 3);	-- bcd
 - substr() 함수와 mid()함수도 동일한 기능을 가짐

30) substring_index() 함수
 - 문법 : substring_index(문자열, 구분자, 횟수)
 - '문자열'에서 '구분자'가 '횟수'만큼 나오면 그 이후의 오른쪽 문자열을 삭제하여 리턴
	단, 횟수가 음수이면 오른쪽 부터 센 후 왼쪽 문자열을 삭제
 - 예1) select substring_index('cafe.naver.com', '.', 2);	-- cafe.naver
 - 예2) select substring_index('cafe.naver.com', '.', -2);	-- naver.com
 - 구분자가 없거나 횟수만큼 구분자가 나오지 않으면 원본 문자열 리턴

31) convert() 함수
 - 문법 : convert(정수로 변경할 문자열, 부호여부)
 - 문자열을 정수로 변경시키며, 부호여부에 따라 음수 표현이 가능함
 - 부호여부 : signed(부호존재), unsigned(부호없음)
 - 예) select convert('1234', signed) + 1;	-- 1235
 - 정수로 변경할 수 없는 문자열일 경우 0을 리턴


4. 수학관련 함수
1) abs() 함수
 - 문법 : abs(숫자값)
 - 매개변수로 받은 숫자값이 절대값을 리턴

2) ceiling(), ceil() 함수
 - 문법 : ceiling(실수), ceil(실수)
 - 매개변수로 받은 실수를 올림하여 정수로 변경(두 함수가 동일)

3) floor() 함수
 - 문법 : floor(실수)
 - 매개변수로 받은 실수를 내림하여 정수로 변경

4) rount() 함수
 - 문법 : rount(실수)
 - 매개변수로 받은 실수를 반올림하여 정수로 변경

5) conv() 함수
 - 문법 : conv(숫자, 이전진법, 변경할진법)
 - 받아온 숫자를 새로운 진법으로 변환하여 리턴
 - 예) conv(11, 16, 10) -> 17(16진수 11을 10진수로 변경)

6) mod() 함수
 - 문법 : mod(나누어 지는 수, 나누는 수)
 - 나눗셈 후 나머지를 리턴
 - 예) mod(10, 3) -> 1, mod(10.1, 3) -> 1.1, mod(5.0, 2.0) -> 1.0
 - '나누어 지는 수 % 나누는 수' 나 '나누어 지는 수 mod 나누는 수'로 연산할 수도 있음

7) pow(), power() 함수
 - 문법 : pow(밑수, 실수), power(밑수, 지수)
 - 거듭제곱을 구하여 리턴하는 함수들로 두 함수가 동일하게 동작함
 - 예) pow(2, 3) -> 8

8) rand() 함수
 - 특별한 매개변수 없이 0 이상 1 미만의 난수를 리턴
 - 예) rand() -> 0 이상 1 미만의 실수, floor(rand() * 10) + 1 -> 1 ~ 10 사이의 정수

9) sign() 함수
 - 문법 : sign(숫자)
 - 받아 온 숫자의 부호를 각각 양수, 0, 음수의 결과로 1, 0, -1로 리턴
 - 예) sign(10) -> 1, sign(0) -> 0, sign(-10) -> -1

10) truncate() 함수
 - 문법 : truncate(숫자, 자릿수)
 - 내림(floor())과 비슷하나 받아 온 숫자를 지정한 소수점 아래 자릿수에 맞춰 잘라냄
 - 예) truncate(123.567, 2) -> 123.56, truncate(123.567, 0) -> 123, truncate(123.567, -2) -> 100
 - 자릿수에 0을 입력하면 정수 부분만 취하고, 음수를 입력하면 자릿수 만큼 0으로 만듦

 - floor() 함수와 truncate() 함수의 비교
 	floor(1.5) -> 1 / truncate(1.5, 0) -> 1.5 -> 1 : 양수일 경우 두 함수는 동일하게 동작
 	floor(-1.5) -> -2 / truncate(-1.5, 0) -> -1 : 음수일 경우 두 함수의 결과는 달라짐
	 - floor() 함수는 지정된 값보다 작은 정수들 중 가장 큰 값을 리턴
	 - truncate() 함수는 소수점 아래를 그냥 버림


5. 날짜 및 시간 함수
1) curdate(), current_date(), current_date 함수
 - 오늘 날짜를 리턴하는 함수들로 매개변수는 없음
 - 리턴타입 : yyyy-mm-dd 

2) curtime(), current_time(), current_time 함수
 - 오늘 시간를 리턴하는 함수들로 매개변수는 없음
 - 리턴타입 : hh:mm:ss

3) now(), sysdate(), localtime(), localtimestamp() 함수
 - 오늘 시간 및 현재 시각을 리턴하는 함수들로 매개변수는 없음
 - 리턴타입 : yyyy-mm-dd hh:mm:ss

4) year(), month(), day() 함수
 - 문법 : year(날짜), month(날짜), day(날짜)
 - 지정한 날짜에서 원하는 부분(연월일)만 추출하여 숫자로 리턴
 - 예) year('2021-04-07') -> 2021, month('2021-04-07') -> 4

5) hour(), minute(), second(), microsecond() 함수
 - 문법 : hour(시간), minute(시간), second(시간), microsecond(시간)
 - 지정할 시간에서 원하는 부분(시분초마이크로초)만 추출하여 숫자로 리턴

6) date(), time() 함수
 - 문법 : date(yyyy-mm-dd형식의 데이터), time(hh:mm:ss형식의 데이터)
 - 받아 온 데이터를 각각 날짜와 시간 부분만 추출하여 리턴(날짜 및 시간 데이터로 변환시켜 줌)
 - datetime 형식으로 입력해도 됨(yyyy-mm-dd hh:mm:ss)

7) adddate(), date_add() 함수
 - 문법 : adddate(날짜, 더할 값), date_add(날짜, 더할 값)
 - 받아 온 날짜에 지정한 값을 더하여 리턴
 - 예)	adddate('2021-02-01', interval  31 day);		-- 2021-03-04
		date_add('2021-02-01', interval -31 day);		-- 2021-01-01
 - 더할 값에 음수를 넣으면 이전 날짜를 구함
 - 더할 값의 단위는 year, month, week, day, hour, minute, second 등 사용가능

8) subdate(), date_sub() 함수
 - 문법 : subdate(날짜, 더할 값), date_sub(날짜, 더할 값)
 - 받아 온 날짜에 지정한 값을 빼서 리턴
 - 예)	subdate('2021-02-01', interval  31 day);		-- 2021-01-01
		date_sub('2021-02-01', interval -31 day);		-- 2021-03-04
 - 뺄 값에 음수를 넣으면 이후 날짜를 구함
 - 뺄 값의 단위는 year, month, week, day, hour, minute, second 등 사용가능

9) addtime(), subtime() 함수
 - 문법 : addtime(날짜 및 시간, 더할 시간), subtime(날짜 및 시간, 뺄 시간)
 - 받아온 날짜 및 시간에 지정한 값을 더하거나 뺀 날짜 및 시간을 리턴
 - 예) 
 	addtime('2021-01-01 23:59:59', '1:1:1'); -- > 2021-01-02 01:01:00
 	subtime('2021-01-01 23:59:59', '1:1:1'); -- > 2021-01-01 22:58:58
 	addtime('23:59:59', '1:1:1'); -- > 25:01:00
 	subtime('23:59:59', '1:1:1'); -- > 22:58:58
 	addtime('23:59:59', '-1:1:1'); -- > 22:58:58 (음수 값도 연산가능)
 	subtime('23:59:59', '-1:1:1'); -- > 25:01:00 (음수 값도 연산가능)
 	addtime('23:59:59', '1:1'); -- > 25:00:59 (시와 분으로 연산됨)
 	subtime('23:59:59', '1:1'); -- > 22:58:59 (시와 분으로 연산됨)
 	addtime('23:59:59', '1'); -- > 24:00:00 (하나만 있으면 초로 연산됨)
 	subtime('23:59:59', '1'); -- > 23:59:58 (하나만 있으면 초로 연산됨)
 - 연산시 기준이 되는 값에 날짜가 빠지면 시각이 아닌 시간(범위로서의 값)으로 변경됨

10) datediff() 함수
 - 문법 : datediff(이후 날짜, 이전 날짜)
 - 두 날짜 사이의 간격으로 이전 날짜에서 이후 날짜까지의 일수를 리턴
 - 예)	datediff('2021-07-15', now()); -- > 99
		datediff('2021-01-28', now()); -- > -69
 - 두 매개변수 중 앞의 값이 이전일 경우 음수로 값이 나옴

11) timediff() 함수
 - 문법 : timediff(이후 시간, 이전 시간)
 - 두 시간 사이의 간격으로 이전 날짜에서 이후 날짜까지의 일수를 리턴
 - 예)	timediff('23:59:59', curtime()); -- > 11:18:55
		timediff('00:00:00', curtime()); -- > -12:41:04
 - 두 매개변수 중 앞의 값이 이전일 경우 음수로 값이 나옴
		
12) dayofweek() 함수
 - 문법 : dayofweek(날짜)
 - 지정한 날짜의 요일을 리턴하는 함수로 1~7의 숫자로 리턴(1:일~7:토)
 - 예) dayofweek('2021-12-25'); -- > 7 

13) monthname() 함수
 - 문법 : monthname(날짜)
 - 지정한 날짜의 월 이름을 영문으로 리턴
 - 예) monthname(now()); -- > April

14) dayofyear() 함수
 - 문법 : dayofyear(날짜) 
 - 지정한 날짜의 1년 중 몇 번째 일인지 리턴
 - 예) dayofyear(now()); -- > 97

15) last_day() 함수
 - 문법 : last_day(날짜)
 - 지정한 날짜의 해당 월의 말일을 리턴
 - 예) last_day('2020-02-15'); -- > 2020-02-29
 
16) makedate() 함수
 - 문법 : makedate(연도, 정수)
 - 지정한 연도에서 지정한 정수만큼 지난 날자를 리턴
 - 예) makedate(2021, 100); -- > 2021-04-10
 - 정수에 음수사용 불가(null 리턴)
 
17) maketime() 함수
 - 문법 : maketime(시, 분, 초)
 - 지정한 시분초를 이용하여 time 형식 데이터로 리턴
 - 예) maketime(12, 34, 56); -- > 12:34:56

18) period_add() 함수
 - 문법 : period_add(연월, 개월수)
 - 지정한 연월에 개월수를 더한 연월을 리턴
 - 예) period_add(202111, 6);	-- > 202205

19) period_diff() 함수
 - 문법 : period_diff(연월1, 연월2)
 - 연월2에서 연월1까지의 개월수를 리턴
 - 예) period_diff(202205, 202111);	-- > 6
 - 연월1이 연월2보다 작으면 음수로 값을 리턴

20) quater() 함수
 - 문법 : quater(날짜)
 - 지정한 날짜가 속한 분기를 리턴
 - 예)  quater(now()) -> 2

21) time_to_sec() 함수
 - 문법 : time_to_sec(시간)
 - 지정한 시간을 초단위로 변환하여 리턴
 - 예)  time_to_sec('12:34:56') -> 45296


6. 시스템 정보 함수
1) datebase() 함수
 - 현재 사용중인 DB의 이름을 리턴
 - 예) datebase() -> world
 - schema() 함수와 동일

2) found_rows() 함수
 - select문으로 조회한 데이터의 행(row, record)의 개수를 리턴
 - 사용전에 select 문을 실행해야 함

3) row_count() 함수
 - 직전에 실행된 insert, update, delete 문의 결과로 추가, 수정, 삭제 된 행의 수를 리턴
 - create나 drop 문은 0 을 리턴하고, select문은 -1을 리턴
 - 입력, 수정, 삭제의 확인 용도로 사용할 수 있으나, 자바에서는 서블릿에 동일한 기능의 메소드가 존재함

4) version() 함수
 - 현재 MySQL의 버전을 리턴

5) sleep() 함수
 - 문법 : sleep(초) 
 - 지정한 초만큼 쿼리의 실행을 잠깐 멈춤


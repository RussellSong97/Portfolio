쓰레드(thread)
 - 프로그램의 실행 흐름(Process)을 제어하여 여러 개의 흐름을 실행시키는 기능
 - 쓰레드에는 Thread 클래스의 setPriority() 메소드로 우선 순위를 지정할 수 있으나 실행 순서가 반드시 우선 순위에 따르지는 않음
 	순서가 중요한 프로그램에서는 쓰레드를 사용하지 않음
 - 쓰레드의 생명주기(Life Cycle)
	New : 쓰레드 클래스로 인스턴스를 생성 시킨 상태
	Runnable : start() 메소드가 호출되어 run() 메소드가 실행되고 있는 상태
	 - start() 메소드가 호출된다고 바로 run() 메소드가 실행되는 것은 아님
	 	스케쥴러에 의해 여러 쓰레드들 중 실행의 대상으로 선택되어야 run() 메소드가 실행
	Blocked : 실행중인 쓰레드가 sleep, 또는 join등의 메소드를 실행할 때 다른 쓰레드에 CPU를 양보하고, 본 쓰레드는 'Blocked' 상태가 됨
	Dead : run() 메소드가 종료되었을 때를 의미하며, 한 번 Dead된 쓰레드는 다시 Runnable 상태가 될 수 있음
	 - Dead상태 되면 쓰레드에서 사용하던 메모리를 비롯 관련 정보도 완전히 삭제됨 

 - 동기화(synchronized)
	여러 쓰레드가 하나의 인스턴스 또는 변수 등을 공유하게 되면 서로 작업이 겹쳐서 잘못된 결과를 나오게 할 수 있음
	작업이 겹치는 상황을 없애기 위해 사용하는 것이 'synchronized' 명령어임
	synchronized는 메소드에 직접 입력하여 사용할 수 있음
	예) public synchronized 리턴 메소드명()
	단, 메소드 자체에 'synchronized'를 붙이면 메소드 전체가 잠김상태로 들어가기 때문에 속도가 많이 떨어질 수 있으므로 꼭 필요한 영역에만 'synchronized' 블록을 만들어서 사용함
	예) synchronized(this) { ... }
	 - this : 현재 동작중인 쓰레드 인스턴스를 의미함
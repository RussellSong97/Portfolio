JSP(Java Server Page)
 - 주석은 자바와 동일하게 사용할 수 있으며, html 코드들 사이에 삽입되어 동작함
 - '<% 에서 %>'까지로 영역을 지정하여 jsp코드를 삽입함
 - 하나의 jsp파일도 서블릿으로 변환되어 컴파일 되므로 jsp파일 하나가 하나의 클래스를 의미함

1. JSP지시어(Directive)
 - page 지시어, include 지시어, taglib 지시어 3가지가 존재

1) page지시어
 - JSP페이지에 대한 속성을 지정하는 지시어로 한 페이지의 가장 위에 존재해야 함
 - 여러 속성을 가지고 있으며 그 중 import를 제외하면 모든 속성은 페이지당 한 번만 사용가느어
 - 속성별로 따로 page지시어를 사용할 수 있고, 여러 속성을 한번에 입력할 수도 있음
 - 문법
<%@ page 속성1="값1" 속성2="값2" ...속성n="값n" %>
==>계속 쓰고 있지만 자동으로 나오니까 쓸일이 없음

 - 속성
language = "java" : 기본값 java. 스크립트 요소에서 사용할 언어 설정
extends = "클래스명" : 기본값 없음. 현재 페이지가 상속 받을 클래스를 지정 (하나의 페이지도 하나의 클래스)
import= "패키지명.클래스명" : 기본값 없음. 현 페이지에 import할 클래스 지정(* 사용가능)
session = "true" : 기본값 true. 현 페이지에서 HttpSession 사용 여부
buffer="16kb" : 기본값 8kb. 페이지의 출력 버퍼 크기를 설정(안정적으로 사용하기 위해)
autoFlush="true" : 기본값 ture. 출력 버퍼가 다 찼을 경우 처리(다 차면 전송시킨다는 의미)
isThreadSafe="true" : 기본값 true. 다중 쓰레드 동시 실행여부로 true를 하면 한 쓰레드가 완료될때까지 다른 쓰레드를 가디리게 한다는 의미
info = "설명" :기본값 없음. 현재 페이지에 대한 설명으로 주석같은 역할을 함
errorPage = "경로 및 에러.jsp" : 기본값 없음. 현재 페이지에서 예외 발생시 처리할 파일 지정
contentType = "text/html; charset = utf-8" : JSP로 생성할 문서의 타입을 지정하는 속성
isErrorPage = "false" : 기본값 false. 현재 페이지를 에러 페이지로 지정하는 속성
pageEncoding = "utf-8" : 기본값 ISO-8859-1. 현재 페이지의 문자 인코딩 설정으로 유니코드인 utf-8로 지정해야 함

2) include 지시어
- 현재 페이지에 다른 jsp나 html 파일을 원하는 위치에 삽입하는 지시어
- 보통 공용 (상단 메뉴, 사이드 메뉴, 카피라이트 등)으로 사용하는 파일등을 include하여 사용
- 문법
<%@ include file = "경로 및 파일명" %>
 - 삽입된 파일들 별로 따로 컴파일되어 합쳐지는 것이 아닌 삽입된 파일의 소스코드 자체가 해당 jsp파일에 복사되어 추가되므로 컴파일은 마지막에 한 번만 이루어 짐
 - include 지시어는 중복이 가능하므로 원하는 만큼의 파일을 삽입할 수 있고, include되는 파일내에서 다른 파일을 또 include할 수 있음
 - 해당 페이지나 include된 파일에서 선언한 변수나 인스턴스들도 모두 공유할 수 있음
 	단, 선언한 곳 보다 위에서 사용할 수는 없음

3)taglib 지시어
 - JSTL(JSP Standard Tag Library)이나 커스텀 태그 등 태그 라이브러리를 JSP에서 사용할 때 접두사를 지정하기 위해 사용됨
 - uri속성과 prefix속성 두가지 속성으로 이루어짐
 - 문법
<%@ taglib uri = "해당URI" prefix="접두사" %>

2.JSP 스크립트 요소
 - JSP페이지에 자바 코드를 삽입하기 위해 사용되는 기능
 - 선언문(Declaration), 스크립틀릿(Scriptlet), 표현식(Expression)으로 나뉨

1) 선언문(Declaration)
 - 멤버 변수나 멤버 메소드를 선언하기 위해 사용되는 구문
 - 선언문을 사용하여 선언한 변수는 멤버 변수로 인식되어 페이지 모든 곳에서 참조가능
 	선언된 위치가 호출 또는 참조하는 위치보다 아래에 있어도 정상적으로 동작함(멤버변수는 선언하는건 상관없음)
	include된 파일에서 선언해도 상관없이 멤버변수로 사용가능
	단, 보통 선언 및 정의나 초기화는 파일 상단에서 처리하는 것이 좋음
 - 문법
 <%! 멤버변수나 메소드를 선언 및 정의 %>

2) 스크립틀릿(Scriptlet) -- 지금 쓰고 잇는 방식
 - 서블릿에서 html등의 코딩이 어려워서 개발된 방식
 - html태그들 사이에서 사용할 수도 있으므로 원하는 위치 어디에서든 사용 가능
 - 선언문과 다르게 스크립틀릿에서 선언한 변수는 선언한 곳의 아래에서만 사용이 가능
 - 문법
<% 자바코드 %>

3)표현식(Expression)
 - 변수나 메소드의 리턴값을 브라우저에 출력하기 위해 사용하는 방법
 - 하나의 표현식 태그 내의 구문 전체가 하나의 print() 메소드의 인수로 들어감
 - 표현식 내부에서는 세미콜론을 사용하면 안됨
 - 문법
<%=변수 or 메소드리턴값 or 수식 등의 출력할 값 %>

3.내장객체
 - import없이도 사용할 수 있는 객체(클래스)들
 - 서블릿에서는 사용하려면 직접 import하고 인스턴스를 생성해야 하지만, jsp에서는 자동으로 미리 인스턴스가 생성되어 있음

1)request객체
 - javax.servlet.http.HttpServletRequest 클래스의 인스턴스
 - 사용자의 요청정보를 담고 있는 객체
 - 주요 메소드
리턴 타입			메소드명 및 설명
String			getParameter(String name)
	: name의 이름으로 지정된 배개변수의 값을 문자열로 리턴하는 메소드로 해당 매개변수가 없으면 null을 리턴함
	: 매개변수 : 쿼리스트링의 변수나 폼 안의 컨트롤을 의미
String[]		getParameterValues(String name)
	: name의 이름으로 지정된 매개변수의 값들을 문자열 배열로 리턴하는 메소드로 같은 이름의 매개변수가 여럿 있을 경우 사용하는 메소드
	: 같은 이름의 컨트롤이 여럿 있을 경우에도 해당되며, 이 때 같은 이름의 컨트롤들이 반드시 같은 종류일 필요는 없음
Enumeration getParameterNames()
	: 전달된 모든 파,라미터의 이름들을 java.util.Enueration 형에 담아서 리턴
 - 헤더 관련 메소드
리턴타입		메소드명 및 설명
String		getHeader(String headerName)
 : http 요청 헤더에 headerName으로 지정된 이름으로 할당된 값을 리턴하여, 이름이 없을 경우 null을 리턴
Enumeration getHeaders(String headerName)
 : http 요청 헤더에 headerName으로 지정된 이름으로 할당된 값들을 java.util.Enuneration 형에 담아서 리턴
Enumeration getHeaderNames() : http 요청 헤더에 포함된 모든 헤더 이름을 java.util.Enumeration 형에 담아서 리턴
int			getIntHeader(String headerName)
	:http 요청 헤더에 headerName으로 지정된 이름으로 할당된 값을 int형으로 리턴하며, int로 변환할 수 없을 경우
	NumberFormatException 발생, HeaderName으로 지정된 이름이 없을 경우에는 -1을 리턴

 - 쿠키, URL/URI, 요청방식 관련 메소드들
리턴타입		메소드명 및 설명
Cookie[]		getCookies(): 헤더에 포함된 쿠키를 javax.servlet.http.Cookie 배열로 리턴
String			getServerName() : 서버의 도메인명을 리턴
int				getServerPort() : 서버의 포트번호를 리턴
StringBugger	getRequestUrl() : 요청 URL을 StringBuffer로 리턴
String			getRequestURI() : 요청 URI를 리턴
String			getQueryString() : 요청에 사용된 쿼리스트링을 리턴
String			getRemoteHost() : 클라이언트의 호스트 이름을 리턴
String			getRemoteAddr() : 클라이언트의 IP주소를 리턴
String			getProtocol() : 요청에 사용된 프로토콜 이름을 리턴
String			getMethod() : 요청에 사용된 요청방식(GET, POST)을 문자열로 리턴
String			getContextPath() : 해당 JSP페이지의 경로를 리턴

2)reponse객체
 - javax.servlet.http.HttpServletResponse 클래스의 인스턴스
 - 사용자의 요청(request)에 대한 응답을 나타내는 객체
 - 주요 메소드명 및 설명
리턴 타입			메소드명 및 설명
void			setHeader(String headerName, String headerValue)
	: 응답에 폼함될 헤더 정보에 headerName의 이름으로 headerValue 값을 추가
void	addCookie(Cookie cookie) : javax.servlet.http.Cookie 타입의 인스턴스를 응답 헤더에 추가
void	sendRedirect(String url): 지정된 url로 이동시킴
void	setContentType(String type) : 응답할 페이지의 contentType을 설정


3) pageContext 객체
 - javax.servlet.jsp.pageContext 클래스의 인스턴스
 - 다른 내장 객체를 얻어 오거나 현재 페이지의 요청과 응답의 제어권을 다른 페이지로 넘겨주는 데 사용
 - 주요 메소드
리턴타입			메소드명 및 설명
ServletRequest	getRequest(); 사용자의 요청 정보를 담은 객체(request)를 리턴
ServletResponse	getResponse() : 사용자의 요청에 대한 응답 객체(reponse)를 리턴
JspWriter		getout() : 응답 출력 스트림 객체(out)를 리턴
Object			getpage() : 서블릿 인스턴스 객체(page)를 리턴
ServletConfig	getServletConfig() : 서블릿의 초기 설정 정보를 담은 객체(config)를 리턴
HttpSession		getSession() : 세션 객체(session)를 리턴
void			forward(String url) : 현재페이지의 요청과 응답에 대한 응답에 대한 제어권을 url로 지정된 페이지로 영구적으로 넘김
void			include(String url) : 현재페이지의 요청과 응답에 대한 응답에 대한 제어권을 url로 지정된 페이지로 임시적으로 넘김
 - include된 페이지의 처리가 끝나면 제어권은 다시 원래의 페이지로 돌아옴
 - 따라서 include로 지정된 페이지의 내용을 원래 페이지에 삽입하는 효과를 줌
 - page지시어의 include와는 다르게 겉의 파일에서 선언한 변수등을 include된 파일에서는 사용할 수 없음


4) session객체
 - 기본적으로 요청과 응답 후 연결이 끊어지는 웹의 특성상 클라이언트의 정보를 유지하기 위해 제공되는 기능
 - 웹브라우저에 종속적인 객체로 브라우저의 탭을 종료하는 것은 세션객체에 아무런 영향을 미치지 않고, 브라우저를 종료해야 세션객체가 소멸
 - 세션객체는 사용자가 아무런 동작을 하지 않으면 자동으로 특정 시간이 흐른 뒤 소멸됨
리턴타입		메소드명 및 설명
String		getId(): 해당 세션의 세션ID를 문자열로 리턴. 세션ID는 자동으로 생성 및 할당되며 유니크한 값임
Object		getAttribute(String att_name) : 세션의 속성 중 지정한 이름(att_name)의 속성값을 리턴 . 컬렉션의 맵과 비슷
long		getCreationTime() : 1970/01/01 00:00:00부터 세션이 생성된 순간까지의 경과 시간을 밀리초 단위로 계산하여 리턴
long		getLastAccessedTime() : 1970/01/01 00:00:00부터 세션에 마지막으로 접근한 순간까지의 경과 시간을 밀리초 단위로 계산하여 리턴
void		invalidate() : 세션의 모든 속성(attribute)값들을 삭제한 후 세션 종료 - 로그아웃으로 많이 사용
boolean		isNew() : 새로 생성된 세션이면 true, 기존의 세션이면 false
void		removeAttribute(String att_name) : 지정된 이름의 세션 속성을 삭제
void		setAttribute(String att_name,Object att_value) : 지정된 이름과 값으로 세션에 속성을 추가
void		setMaxInactiveInterval(int seconds) : 사용자의 요청 없이도 세션이 유지되는 시간을 초단위로 설정
void		forward(String url) : url로 지정된 주소로 제어권을 넘김
void		include(String url) : url로 지정된 페이지를 삽입

5)application 객체
 - 서버의 정보와 서버측 자원에 대한 정보를 구할 수 있는 객체
 - 사이트당 하나만 생성되는 객체로 사이트 전체에서 자원을 공유할 때 사용(방문자 수, 통계 등)
 - 웹서버에 종속적인 객체로 웹서버를 종료하지 않는 이상 객체는 계속 살아 있음
 	그러므로, application 객체를 많이 사용하면 사이트가 느려질 수도 있음
 - 주요 메소드
리턴타입		메소드명 및 설명
int			getMajorVersion() : Servlet API의 major버전
int			getMinorVersion() : Servlet API의 minor버전
String		getServletInfo() : 웹서버의 이름과 버전을 리턴
String		getRealPath(String path) : 지정한 경로를 서버의 실제 파일시스템상 경로로 리턴
java.net.URL	getResourse(String path) : 지정한 경로를 url객체로 리턴

6) out객체
 - 브라우저에 출력하는 용도로 사용되는 객체
 - 주요 메소드
리턴타입		메소드명 및 설명
void		clear() : 출력 버퍼에 저장된 내용을 비움
void		flush() : 현재 버퍼에 저장되어 있는 내용을 클라이언트로 전송하고 버퍼를 비움
void		close() : 현재 버퍼에 저장되어 있는 내용을 클라이언트로 전송하고 버퍼를 종료
int			getBuggerSize() : 출력 버퍼의 크기를 바이트 단위로 리턴
int			getRemaioning() : 출력 버퍼의 남은 양을 바이트 단위로 리턴
void		Print(String str) : 지정한 str을 브라우저에출력

파일이동 방법
1)redirect 방법
 - response 객체의 sendRedirect(url) 메소드를 이용하여 이동
 - 이전페이지의 request와 response 객체가 이동하는 페이지에서는 필요없는 경우 사용됨

2)dispatch방법
 - pageContext 객체의 forward(url)메소드를 이용하여 이동
 - 이동하더라도 주소창의 url이 변경되지 않고, 요청(request)과 응답(response) 정보에 대한 제어권을 이동한 페이지로 넘김
 	이전 페이지의 request와 response를 이동한 페이지에서 사용할 수 있음

 - 두 방식 모두 웹히스토리에 남지 않는 방식으로 브라우저의 '뒤로가기'가 안됨

4. 영역(scope) 객체와 속성(attribute)
 - 내장 객체들 중 application, session, request, page 객체들은 해당 객체에 정의된 유효 범위 안에서 필요한 데이터들을 저장하고 읽어 들임으로써 서로 공유할 수 있는 특정 영역을 가짐

 - 공유되는 데이터를 속성(attribute)이라 하고, 속성을 공유할 수 있는 유효 범위를 영역(scope)이라 함

 - 각 객체의 유효범위(영역)
 	application : 해당 웹 애플리케이션(사이트)이 실행되고 있는 동안 속성을 사용할 수 있음
	- 웹 서버를 끄지 않는 이상 모든 페이지에서 사용이 가능(실제로는 사용빈도가 낮음)
	- 페이지에 상관없이 데이터를 유지할 수 있음 : 모든 브라우저가 동일한 값을 가짐

	session : 세션이 유지되는 동안 속성을 사용할 수 있음
	 - 세션이 끊어지지 않는 이상 모든 페이지에서 사용가능(로그인에서 주로 사용)
	 - 페이지에 상관없이 데이터를 유지할 수 있음 : 각 브라우저별로 다른 값을 가짐

	request : 클라이언트의 요청이 처리되는 동안 속성을 사용할 수 있음
	 - 요청을 받은 페이지나 제어권을 물려받은 페이지에서 사용가능
	 - 대부분 한 페이지내에서만 사용하지만 forward시킬 경우 request 제어권을 이동할 페이지로 넘기기 때문에 이동한 페이지에서도 request객체의 속성(attribute)을 사용할 수 있음

	page : 해당 페이지 내에서만 속성을 사용할 수 있음
	 - page객체가 아닌 pageContext객체를 통해 속성을 사용함(사용빈도는 낮으편)
	 - 오직 한 페이지내에서만 사용 가능

 - 주요 메소드 : 네 영역 객체에서 동일하게 정의되어 있음
리턴타입		메소드명 및 설명
Object		getAttribute(String key) : 지정된 key에 해당하는 속성값을 Object형으로 리턴 - 없으면 null리턴
 - Object 형으로 리턴되므로 사용시 반드시 해당 클래스형으로 형변환 후 사용해야 함
Enumeration getAttributeNames() : 모든 속성 이름들을 Enumeration 타입으로 리턴
void		setAttribute(String key, Object obj) : key의 이름으로 obj값을 속성으로 등록
void		removeAttribute(String key) : 지정된 key에 해당하는 속성값을 삭제
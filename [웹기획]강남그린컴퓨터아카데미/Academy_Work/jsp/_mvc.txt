Model2
 - model1은 JSP로 화면 구성뿐만 아니라 처리(비즈니스 로직)하는 파일까지 JSP로 작업하는 형태
 	개발시간이 짧아 진다는 장점이 있으나, HTML 코드와 자바 코드들이 섞여 있어 복잡하다는 단점이 있음 
	디자이너와 개발자 영역의 비분리로 인해 프로젝트의 규모가 커질수록 단점이 커짐
 - model2는 이러한 model1의 단점을 극복하여 디자인 부분과 개발(비즈니스 로직) 부분을 분리해서 작업함
 	개발시간이 길어질 수 있으나 디자이너는 디자인 부분만 개발자는 로직 부분만 작업하는 것이 가능해짐
	일반적으로 규모가 작으면 model1으로 크면 model2로 작업하는 경우도 있음
	
MVC 패턴
 - Model, View, Controller 의 이니셜로 Model2의 일종의 발전형으로 볼 수 있음
 	간혹 MVC패턴과 Model2를 동일한 개념으로 보는 사람도 있음

1. Controller
 - MVC 중 유일한 서블릿으로 View와 Model을 연결시켜주는 요소로 사용됨 
 - 사용자의 요청(request)을 받아 들여 View나 Model을 호출하는 역할을 함
	단, 요청에 대한 응답으로 화면을 만드는 것은 View에서 처리함 

2. View
 - JSP 파일로 화면의 출력 부분을 담당함 : 화면 출력이므로 거의 디자인에 관련된 코드로 이루어져 있음
 - 절대 DB 연동과 같은 비즈니스 로직을 구현하지 않음
	Controller를 통해 Model에서 작업한 결과를 화면에 출력할 때 사용됨

3. Model
 - 일반 자바파일(클래스 파일)로 만들어 지며 실제 비즈니스 로직을 실행하는 영역
 	DB연동이나 쿼리 실행 등의 작업을 처리함

4. MVC 패턴의 기본적인 패키지 구조
 - src/ctrl, src/dao, src/db, src/svc, src/vo
 - ctrl : controller로 서블릿들이 정의되어 있는 패키지 
 	사용자의 요청을 받아 Model이나 View로 연결시키는 역할로 모든 작업의 시작점 
 - dao : Data Access Object의 약자로 DB에 있는 데이터들을 쿼리를 이용해서 작업하는 클래스들이 정의되는 패키지
	DB에 보낼 쿼리를 작성하여 작업하는 클래스들이 있는 패키지 
	단, 직접적으로 DB에 접근하는 기능은 없음 
 - db : DB관련해서 공통적으로 수행해야 하는 기능들을 구현하는 클래스들이 정의되는 패키지 
	Connection, Statement, ResultSet 생성 및 종료, 트랜잭션 시작 및 종료 등의 기능을 가진 메소드들을 정의
 - svc : Service로 비즈니스 로직을 구현하는 클래스들이 정의되어 있는 패키지
 	DB와 관련된 작업을 제외한 모든 작업을 처리하는 클래스들의 패키지 
 - vo : Value Object의 약자로 관련이 있는 특정 데이터들을 모아서 저장할 수 있는 클래스들이 정의되는 패키지 
 	관련된 하나의 레코드(한 명의 회원정보, 게시글 정보 등)를 일괄적으로 저장하는 클래스
	저장된 데이터들을 하나의 인스턴스로 저장하여 사용하게 됨 


MVC를 이용한 쇼핑몰 제작
mvcSite라는 (Dynamic)프로젝트 생성
 - .../WebContent/WEB-INF/lib 폴더 안에 jar 파일 복사 
 - .../WebContent/META-INF 폴더 안에 'context.xml' 파일 생성

자료(data) 
	: 이 세상에 존재하는 모든 것이며, 컴퓨터에 한해서는 컴퓨터에 입력할 수 있는 디지털화 된 자료들로 한정지어야 함

정보(information) 
	: 자료들 중 쓸만한 것들을 가공하여 만들어내는 결과물

데이터베이스(DataBase) 
	: 자료들을 모아 놓은 집합으로 단순히 모아놓은 것에 그치지 않고, 나름의 규칙을 가지고 잘 정리해 놓은 것을 의미
	- 검색이 용이하도록 데이터들을 정리해야 함

DBMS(DataBase Managemant System)
	- DB를 관리 및 운영하는 프로그램으로 여러 명의 사용자나 응용프로그램이 공유하고 동시에 접근이 가능하도록 관리해 줌
	- 종류 : Oracle, MySQL, MS-SQL, MariaDB 등

1. DBMS의 종류
 - 계층형 DBMS(Hierarchical DBMS)
 	가장 처음 나온 DBMS 개념으로 1960년대에 시작되었으며, 각 계층은 트리 형태를 가지며 1:N 관계를 가짐
	단, 구축한 후 변경이 까다로워 검색을 빠르나 접근의 유연성이 부족하다는 단점이 있음

 - 망형 DBMS (Network DBMS)
 	계층형 DBMS의 문제점을 개선하기 위해 1970년 시작되었으며 1:1, 1:N, N:N 관계가 지원되어 빠른 데이터 추출이 가능하다
	단, 계층형과 마찬가지로 매우 복잡한 내부 포인터를 사용하며 개발자가 이 모든 구조를 이해해야만 개발이 가능하다는 단점이 있다

 - 관계형 DBMS(Relational DBMS)
 	1969년 E.F.Codd라는 학자가 수학 모델에 근거하여 고안한 방식
	RDBMS의 핵시미 개념은 '데이터베이스는 테이블(table)이라는 최소 단위로 구성된다. 그리고 이 테이블은 하나 이상의 열(column, field)로 구성되어 있다.'
	모든 데이터는 테이블에 저장되어 있는 구조이다.
	다른 DBMS에 비해 쉽게 변화에 순응할 수 있는 구조이며, 유지보수 측면에서도 편리하다.
	대용량 데이터의 관리와 데이터 무결성을 보장해 준다.(각종 제약조건과 관계성을 통해 무결성을 확보할 수 있음)
	단, 시스템 자원을 많이 차지하여 시스템을 전반적으로 느려기제 함 (하드웨어의 발전으로 큰 의미 없음)

2. 테이블(table)
	- RDBMS 의 기본 구성요소이며, 모든 데이터가 저장되어 있는 곳으로 RDBMS는 반드시 하나 이상의 테이블이 존재해야 함
	- 하나 이상의 열(column or field)로 구성되어 있음
		각 열은 특별한 경우가 아니면 데이터가 비어 있으면 안됨
		빈 컬럼을 만들지 않기 위해 하나의 테이블이 아닌 여러 개의 테이블로 나누어 저장함으로써 불필요한 공간의 낭	비를 줄이고 데이터 저장의 효율성을 보장해야 함
		나누어진 테이블간의 관계를 기본키(primary key, PK)와 외래키(foreign key, FK)를 사용하여 관계를 맺어줌
	- 데이터가 저장된 테이블에서 결과를 얻고자 할 경우 sql을 사용하여 얻을 수 있음

테이블에서 사용되는 기능 및 용어

	- 열(column or field) : 테이블의 구성요소로 각 테이블에는 최소 하나 이상의 열이 존재해야 함
	
	- 열의 이름 : 컬럼명으로 각 열을 구분하기 위한 이름으로 한 테이블에서는 중복불가이며, 다른 테이블일 경우 중복허용
	
	- 데이터타입(자료형) : 각 열에 저장될 자료의 자료형으로 정수, 실수, 날짜, 문자열 등의 자료형이 존재함(자바와는 차이가 있음)
	
	- 행(row or record) : 실질적으로 사용가능한 데이터로 테이블의 한 행을 의미하며 record라는 용어를 더 사용함
	
	- 기본키(Primary key, PK, 주키)
  		특징 : 중복불가, 필수입력, 인덱스 생성(검색속도 향상)의 세가지 제약조건을 자동으로 가짐
		테이블에서 레코드들을 구분하는 용도로 사용됨
		기본키는 테이블당 하나만 지정할 수 있으며, 필요에 따라 두 개 이상의 컬럽을 묶어서 기본키로 지정할 수도 있음
		테이블 마다 모두 기본키를 지정하라는 것이 권장사항이나 기본키 없이 생성되는 테이블들도 존재함
		단, 기본키 생성시 검색속도는 향상되나 입력, 수정, 삭제 시 속도가 느려지는 단점도 있음
	
	- 외래키(foreign key, FK)
		특징 : 중복허용, 필수입력
		두(두개 이상도 가능)테이블 간의 관계 생성시 사용되는 키
		기본키와 다르게 한 테이블에서 여러 개의 외래키를 지정할 수 있음
		외래키와 관계를 맺는 상대 테이블의 컬럼은 기본키여야 하며, 관계를 맺는 순간 제약조건이 걸림
			- 외래키와 다른 테이블의 기본키가 관계를 맺어 1:N 의 관계가 성립되는 순간 '참조 무결성'의 특징을 가지게 됨
				- PK에 해당하는 컬럼의 값들 중에 속하지 않는 값이나 아예 값을 입력하지 않은 경우 참조 무결성에 위배되어 오류

SQL ( Structured Query Language : 구조적 질의어)
	- 에스큐엘, 쿼리, 시퀄 등으로 불리우며 DBMS에 명령을 내리는 언어
	- sql은 DBMS 제작 회사 별로 다른 부분도 있지만 표준이 있어 표준에 맞는 sql은 어떠한 DBMS에서도 동일하게 동작함
		단, 표준으로만 사용하기에는 한계가 있어 각 DBMS별 전용 명령어를 사용하기도 함
		Oracle은 PL/SQL, MS-SQL은 T-SQL, MySQL은 SQL이라 부름
	- sql로는 객체 생성, 소멸, 입력, 변경, 삭제, 조회 등의 작업을 처리할 수 있음
	- 생성 쿼리
		DB, 테이블, 인덱스, 뷰 등의 객체를 생성할 때 사용하는 쿼리
		문법 : create 객체종류 객체명 내용;
	- 변경 쿼리
		DB, 테이블, 인덱스, 뷰 등의 객체를 변경할 때 사용하는 쿼리
		문법 : alter 객체종류 객체명 내용;
	- 삭제 쿼리
		DB, 테이블, 인덱스, 뷰 등의 객체를 삭제할 때 사용하는 쿼리로 내용이 아닌 객체 자체를 제거
		문법 : drop 객체종류 객체명 내용;
	- 데이터 관련 쿼리
		데이터에 직접적으로 영향을 주는 쿼리로 입력, 수정, 삭제, 검색 등의 쿼리가 존재함
		입력 : 특정 테이블에 새로운 레코드를 추가할 때 사용하는 쿼리
			- 문법 : insert into 테이블명 (컬럼명1[, 컬럼명2, ..., 컬럼명n]) values (값1[, 값2, ..., 값n]);
			- 추가할 컬럼명들과 값들의 순서와 개수가 정확히 일치해야 함

		수정 : 테이블에서 특정 레코드(들)의 내용을 변경할 때 사용 사용하는 쿼리
			- 문법 : update 테이블명 set 컬럼명1 = 값1[, 컬럼명2 = 값2, ..., 컬럼명n = 값n] [where 조건];
			- where절을 생략하면 해당 컬럼의 모든 값들이 변경됨		  

		삭제 : 테이블에서 특정 레코드(들)의 내용을 삭제할 때 사용 사용하는 쿼리
			- 문법 : delete from 테이블명 [where 조건];
			- where절을 생략하면 해당 테이블의 모든 값들이 삭제됨

		검색 : 테이블(들)에서 지정한 조건에 맞는 레코드들을 검색
			- 문법 : select 컬럼명(들) from 테이블명(들) [where 조건...];

테이블 이외의 DB객체
1. 인덱스(index)
	- 일종의 찾아보기 기능으로 검색속도를 향상해야할 때 사용됨 : 입력, 수정, 삭제 시에는 느려짐
	- 변경이 잦거나, 입력 또는 출력이 잦을 경우 오히려 느려질 수도 있음
	- 또한 검색결과가 지나치게 많으면 사용하지 않는 것이 좋음
	- 특정 컬럼을 지정하면 자동으로 인덱스가 만들어짐

2. 뷰(view)
	- 일종의 가상 테이블로 기존의 테이블(들)의 데이터를 조합하여 새롭게 만듦
	- 뷰를 검색하여도 테이블을 검색하는 것도 동일한 데이터 결과가 나타남
	- 속도 향상을 위해 만들어진 객체로 테이블들에서 필요 데이터들을 모아 출력

3. 스토어드 프로시저(stored procedure)
	- '저장 프로시저'라고도 하며 DB에 저장되어 있는 기능으로 일종의 메소드와 같으며 직접 만들어 사용 가능
	- 스토어드 프로시저 사용시 일반 쿼리보다 프로그래밍에서 처리 속도가 더 빠름

4. 트리거(Trigger)
	- 지정한 컬럼의 데이터에 입력, 수정, 삭제 작업이 발생될 때 실행되는 코드를 의미
	- 좋은 기능이나 리소스를 많이 차지하는 부분이 있어 자주 사용되는 기능은 아님

5. 함수(Function)
	- 프로시저와 비슷하며, 리턴 값이 존재함



MySQL에서의 자료형
	- null : 데이터베이스에 값을 넣지 않고 비어 있을 때를 의미

숫자형식
	정수
	- tinyint : 1byte. -128~127 까지의 정수표현
	- smallint : 2byte. -32768~32767 까지의 정수표현
	- mediumint : 3byte. -8388608~8388607 까지의 정수표현
	- int : 4byte. 약 -21억~21억 까지의 정수표현
	- bigint : 8byte. 약 -900경~900경 까지의 정수표현

	실수
	- float : 4byte. -3.40E+38 ~ 1.17E-38. 소수점 아래 7자리까지 표현
	- double : 8byte. -1.22E-308 ~ 1.79E-308. 소수점 아래 15자리까지 표현

문자열형식
	- char(n) : 1~255자의 문자를 표현하는 고정길이 문자형, 속도가 빠름
	- varchar(n) : 1~65635자의 문자를 표현하는 가변길이 문자형, 속도는 char형보다 느림(text보다는 빠름)

	- tinytext : 1~255자의 text데이터
	- text : 1~65535자의 text데이터
	- mediumtext : 1~16777215자의 text데이터
	- longtext : 1~4294967295자의 text데이터(최대 4GB)
		text계열 자료형들은 하드디스크의 빈 공간을 채우면서 데이터가 입력되기도 하므로 속도는 느리지만 공간을 덜 차지하게 됨

날짜형 데이터 타입
	- DATE : 3 byte. 1001-01-01 ~ 9999-12-31 까지 'YYYY-MM-DD' 형식의 날짜만 저장
	- TIME : 3 byte. -838:59:59.000000 ~ 838:59:59.000000 까지 'hh:mm:ss' 형식의 시간만 저장
	- DATETIME : 8 byte. 1001-01-01 00:00:00.000000 ~ 9999-12-31 23:59:59까지  (YYYY-MM-DD hh:mm:ss) 형식으로 저장
	- YEAR : 1 byte. 1901~2155까지 'yyyy' 형식으로 저장
		개발자에 따라 날짜 데이터 형식을 따로 사용하지 않고 문자열로 처리하는 경우도 있음

BLOB형식 : Binary Large Object - 이미지, 동영상, 문서파일 등의 대용량 이진데이터
	- tinyblob : 1~255크기의 blob데이터
	- blob : 1~65635크기의 blob데이터
	- mediumblob : 1~16777215크기의 blob데이터
	- longblob : 1~4294967295크기의 blob데이터(최대 4GB)
		파일을 DB에 저장할 때 사용하는 자료형이나 보통은 파일을 DB에 저장하지 않음



데이터베이스 백업(Backup/Export) 및 복원(Restore/Import)
 - 현재의 데이터베이스를 다른 저장매체(다른하드, usb메모리, 온라인 등)에 보관하는 작업을 백업이라고 함

 - 백업실행
 워크벤치의 Navigator의 Administration 탭 클릭 -> Data Export -> 백업할 DB선택 및 테이블 & view 선택 -> Objects to Export영역에서
 Dump Stored Procedure and Functions를 위히산 체크박스 모두 선택 -> Export Option영역에서 Export to Self-Contained File 라디오버튼 선택 후 원하는 위치 지정하고 파일명 입력, 하단의 체크박스 중 Create Dump in a Single Transaction만 체크(Include Create Schema 체크박스는 체크 ㄴㄴ) -> 화면 우하단의 [Start Export] 버튼 클릭


- 복원
 워크벤치의 Navigator의 Schemas탭에서 복원한 데이터를 담을 Schema(DB) 생성 -> Administration탭 클릭 -> Data Import/Restore -> import from Self-Contained File 라디오버튼 선택 후 백업파일이 있는 위치에서 백업파일 열기 -> Default Target Schema에서 새로 생성한 DB 선택 -> 화면 우측하단의 [Start Import] 버튼 클릭